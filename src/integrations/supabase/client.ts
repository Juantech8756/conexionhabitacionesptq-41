
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jnudcjgbplvxwrbnrlju.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpudWRjamdicGx2eHdyYm5ybGp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NjM1MTksImV4cCI6MjA2MjMzOTUxOX0.YFthBcpzlYQE8YcBAZCfUUj6GFjDIkhsxWxQl0vyQQ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  auth: {
    persistSession: true
  }
});

// Check and create necessary storage buckets
(async function initializeStorage() {
  try {
    // Check if chat_media bucket exists
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error checking storage buckets:', listError);
      return;
    }

    const chatMediaBucket = buckets?.find(bucket => bucket.name === 'chat_media');
    const audioMessagesBucket = buckets?.find(bucket => bucket.name === 'audio_messages');
    
    // Create chat_media bucket if it doesn't exist
    if (!chatMediaBucket) {
      console.log('Creating chat_media storage bucket...');
      const { data, error } = await supabase.storage.createBucket('chat_media', {
        public: true, // Make sure bucket is public
        fileSizeLimit: 20971520, // 20MB limit
        allowedMimeTypes: ['image/*', 'video/*']
      });
      
      if (error) {
        console.error('Error creating chat_media bucket:', error);
        
        // If the error is due to RLS policy, we can't do much client-side
        if (error.message?.includes('row-level security policy')) {
          console.warn('Unable to create bucket due to Row Level Security policy. This might need to be created in the Supabase dashboard.');
        }
      } else {
        console.log('Created chat_media bucket successfully');
      }
    } else {
      console.log('chat_media bucket already exists');
      
      // Make sure the bucket is public if it exists
      try {
        const { error: updateError } = await supabase.storage.updateBucket('chat_media', {
          public: true,
          fileSizeLimit: 20971520 // 20MB limit
        });
        
        if (updateError) {
          console.error('Error making bucket public:', updateError);
        } else {
          console.log('Ensured chat_media bucket is public');
        }
      } catch (err) {
        console.error('Error updating bucket settings:', err);
      }
    }
    
    // Create audio_messages bucket if it doesn't exist
    if (!audioMessagesBucket) {
      console.log('Creating audio_messages storage bucket...');
      const { data, error } = await supabase.storage.createBucket('audio_messages', {
        public: true, // Make sure bucket is public
        fileSizeLimit: 10485760, // 10MB limit
        allowedMimeTypes: ['audio/*']
      });
      
      if (error) {
        console.error('Error creating audio_messages bucket:', error);
      } else {
        console.log('Created audio_messages bucket successfully');
      }
    } else {
      console.log('audio_messages bucket already exists');
      
      // Make sure the bucket is public if it exists
      try {
        const { error: updateError } = await supabase.storage.updateBucket('audio_messages', {
          public: true
        });
        
        if (updateError) {
          console.error('Error making audio_messages bucket public:', updateError);
        } else {
          console.log('Ensured audio_messages bucket is public');
        }
      } catch (err) {
        console.error('Error updating audio_messages bucket settings:', err);
      }
    }
  } catch (err) {
    console.error('Failed to initialize storage:', err);
  }
})();
