
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jnudcjgbplvxwrbnrlju.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpudWRjamdicGx2eHdyYm5ybGp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NjM1MTksImV4cCI6MjA2MjMzOTUxOX0.YFthBcpzlYQE8YcBAZCfUUj6GFjDIkhsxWxQl0vyQQ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Crear el bucket chat_media al iniciar la aplicación
async function createChatMediaBucket() {
  try {
    // Verificar si el bucket ya existe
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error checking storage buckets:', listError);
      return;
    }
    
    // Buscar el bucket chat_media
    const chatMediaBucket = buckets?.find(bucket => bucket.name === 'chat_media');
    
    // Si no existe, intentar crearlo
    if (!chatMediaBucket) {
      console.log('Creating chat_media storage bucket...');
      try {
        const { data, error } = await supabase.storage.createBucket('chat_media', {
          public: true,
          fileSizeLimit: 10485760, // 10MB limit
          allowedMimeTypes: ['image/*', 'video/*']
        });
        
        if (error) {
          console.error('Error creating chat_media bucket:', error);
          // Si el error es por política de RLS, no podemos hacer mucho desde el cliente
          if (error.message?.includes('row-level security policy')) {
            console.warn('Unable to create bucket due to Row Level Security policy. This might need to be created in the Supabase dashboard.');
          }
        } else {
          console.log('Created chat_media bucket successfully');
        }
      } catch (createErr) {
        console.error('Failed to create bucket:', createErr);
      }
    } else {
      console.log('chat_media bucket already exists');
      
      // Asegurar que sea público
      try {
        await supabase.storage.updateBucket('chat_media', {
          public: true,
          fileSizeLimit: 10485760,
          allowedMimeTypes: ['image/*', 'video/*']
        });
      } catch (updateErr) {
        console.error('Error updating bucket settings:', updateErr);
      }
    }
    
    // Intentar crear el bucket audio_messages también
    const audioMessagesBucket = buckets?.find(bucket => bucket.name === 'audio_messages');
    
    if (!audioMessagesBucket) {
      try {
        await supabase.storage.createBucket('audio_messages', {
          public: true,
          fileSizeLimit: 10485760,
          allowedMimeTypes: ['audio/*']
        });
      } catch (audioErr) {
        console.error('Failed to create audio_messages bucket:', audioErr);
      }
    }
  } catch (err) {
    console.error('Failed to initialize storage:', err);
  }
}

// Ejecutar la función de inicialización
createChatMediaBucket();
