
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jnudcjgbplvxwrbnrlju.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpudWRjamdicGx2eHdyYm5ybGp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NjM1MTksImV4cCI6MjA2MjMzOTUxOX0.YFthBcpzlYQE8YcBAZCfUUj6GFjDIkhsxWxQl0vyQQ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Create necessary storage buckets when the application starts
async function createStorageBuckets() {
  try {
    console.log("Initializing storage buckets...");
    
    // Check if buckets exist
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error checking storage buckets:', listError);
      return;
    }
    
    // Create or update chat_media bucket
    const createOrUpdateBucket = async (bucketName: string, mimeTypes: string[], exists: boolean = false) => {
      try {
        if (!exists) {
          console.log(`Creating ${bucketName} storage bucket...`);
          const { data, error } = await supabase.storage.createBucket(bucketName, {
            public: true,
            fileSizeLimit: 10485760, // 10MB limit
            allowedMimeTypes: mimeTypes
          });
          
          if (error) {
            console.error(`Error creating ${bucketName} bucket:`, error);
            if (error.message?.includes('row-level security policy')) {
              console.warn('Unable to create bucket due to Row Level Security policy. This might need to be created in the Supabase dashboard.');
            }
          } else {
            console.log(`Created ${bucketName} bucket successfully:`, data);
          }
        } else {
          console.log(`${bucketName} bucket already exists`);
          
          // Ensure it's public
          try {
            const { data, error } = await supabase.storage.updateBucket(bucketName, {
              public: true,
              fileSizeLimit: 10485760,
              allowedMimeTypes: mimeTypes
            });
            
            if (error) {
              console.error(`Error updating ${bucketName} bucket settings:`, error);
            } else {
              console.log(`Updated ${bucketName} bucket successfully:`, data);
            }
          } catch (updateErr) {
            console.error(`Error updating ${bucketName} bucket settings:`, updateErr);
          }
        }
      } catch (err) {
        console.error(`Failed to create/update ${bucketName} bucket:`, err);
      }
    };
    
    // Check and create/update chat_media bucket
    const chatMediaBucket = buckets?.find(bucket => bucket.name === 'chat_media');
    await createOrUpdateBucket('chat_media', ['image/*', 'video/*'], !!chatMediaBucket);
    
    // Check and create/update audio_messages bucket
    const audioMessagesBucket = buckets?.find(bucket => bucket.name === 'audio_messages');
    await createOrUpdateBucket('audio_messages', ['audio/*'], !!audioMessagesBucket);
    
    console.log("Storage buckets initialization complete");
  } catch (err) {
    console.error('Failed to initialize storage:', err);
  }
}

// Execute initialization function
createStorageBuckets();
